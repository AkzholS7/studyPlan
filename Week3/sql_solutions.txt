Solve SQL questions on Hackerrank:
 
Select All  -  SELECT * from CITY

Select By ID - SELECT * FROM CITY WHERE ID = 1661

Japanese Cities’ Attributes - SELECT * FROM CITY WHERE COUNTRYCODE LIKE "JPN"

Japanese Cities’ Names  -  SELECT NAME FROM CITY WHERE COUNTRYCODE LIKE 'JPN'

Weather Observation Station 1 - SELECT CITY,STATE FROM STATION

Weather Observation Station 3 - SELECT DISTINCT CITY FROM STATION WHERE MOD(ID,2) = 0

Weather Observation Station 5 - select CITY, length(CITY) from STATION order by length(CITY), CITY limit 1;
select CITY, length(CITY) from STATION order by length(CITY) desc, CITY limit 1;

Weather Observation Station 7 - SELECT DISTINCT CITY FROM STATION
WHERE RIGHT(CITY,1) in ('a', 'e', 'i', 'o', 'u') order by city asc;

Higher Than 75 Marks - SELECT NAME FROM STUDENTS WHERE MARKS > 75
ORDER BY SUBSTR(NAME, -3, 3), ID; 

Employee Names - select name from Employee order by name asc


Solve SQL questions on Hackerrank:


2603 - Customer Address - select name, street from customers where city like 'Porto Alegre'

2607 - Providers' City in Alphabetical Order - select city from providers order by city


2608 - Higher and Lower Price - select max(price), min(price) from products


2615 - Expanding the Business - select distinct city from customers where city is not null


2617 - Provider Ajax SA  - SELECT products.name, providers.name
FROM products
INNER JOIN providers ON products.id_providers = providers.id
WHERE providers.name = 'Ajax SA'


2622 - Legal Person  -  select customers.name from customers
inner join legal_person
on customers.id = legal_person.id_customers
where legal_person.id_customers !=0


2604 - Under 10 or Greater Than 100 - select ID, name from products where price <10 or price >100


2613 - Cheap Movies - select movies.id, movies.name from movies
inner join prices
on movies.id_prices = prices.id
where prices.value < 2.00

2619 - Super Luxury - select products.name, providers.name, products.price from products
join providers
on providers.id = products.id_providers
join categories
on products.id_categories = categories.id
where products.price > 1000 and categories.name like 'Super Luxury'


2606 - Categories - select products.id, products.name from products
inner join categories 
on products.id_categories = categories.id
where categories.name like 'super%'

2610 - Average Value of Products - select round(avg(price),2) from products;


2618 - Imported Products - select products.name, providers.name, categories.name from products
inner join providers
on products.id_providers = providers.id
inner join categories
on products.id_categories = categories.id
where providers.name like 'Sansul SA' and categories.name
like 'Imported';


2620 - Orders in First Half - SELECT customers.name, orders.id from customers
inner join orders
on customers.id = orders.id_customers
where orders.orders_date between '2016-01-01' and '2016-06-30' 

2624 - Number of Cities per Customers - select count(distinct city) from customers


2621 - Amounts Between 10 and 20 - select products.name from products
inner join providers
on products.id_providers = providers.id
where providers.name like 'P%' and products.amount between 10 and 20;


2602 - Basic Select - select name from customers where state like 'RS'


2611 - Action Movies - select movies.id, movies.name from movies
inner join genres
on movies.id_genres = genres.id
where genres.description like 'Action'

2623 - Categories with Various Products - select products.name, categories.name from products
inner join categories
on products.id_categories = categories.id
where products.amount > 100 and categories.id in(1,2,3,6,9)
order by categories.id asc;


2625 - CPF Validation - select substring(CPF,1,3) || '.' || 
substring(cpf,4,3) || '.' || substring(cpf,7,3) ||
'-' || substring(cpf,10,2)
from natural_person


2738 - Contest - select c.name, 
round((math*2+specific*3+project_plan*5)/10, 2)
as avg from candidate as c, 
score where score.candidate_id = c.id order by avg desc;


2609 - Products by Categories - select categories.name, sum(products.amount) from categories
inner join products
on categories.id = products.id_categories
group by categories.name;